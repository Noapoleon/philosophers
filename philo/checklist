TODO:
	- when encountering errors in a thread (protected functions and such) change
	  the return value, by default 
	- minimum meals could be implemented with a decrementing counter and a
	  seperate singular thread could loop that and check that the counter has
	  not yet reached 0, if it did set ret to 1, need to add mutexes then
	- remove mutex in initializer that's uselss now for philo

QUESTIONS:
	- [OK] the fuck is a mutex ?
	- [OK] the fuck are threads specifically ?
	- [OK] is it worth it to make a generalized function for all changes in state or
	  should i make one function per action (easier, probably neater)?
	- [NO] with the addition of functions for changing states it could make it easier 
	  to protect ALL calls to pthread_mutex_lock, SHOULD I DO IT?? Small issue:
	  right now pthread_mutex_lock is in the print_state function, meaning I'd
	  have to change it to return -1 if I want to do this
	- should I set the ret mutex to 1 when there's an error ?? not sure where
	  that's useful but in main there was something i thought about that
	- set ret to 1 in one of the two terminate functiosn (dont remember which
	  one) if the second one fails to start all of it's threads ?
	- AM I SURE THERE'S NO DEADLOCK POSSIBLE WITH THE ORDER OF THE LOCKS IN THE
	  THE ROUTINES?????

DONE:
	- ansi color codes for output
	- find out types of timeval for proper printf
	- init all mutexes in setup and destroy them in philo_terminate()
	- function(s) for for changing states which combine locking, setting,
	  printing and unlocking
	- terminate function right now is wack, need to fix calls to free and
	  destroy
	- right now im gonna do a dirty implementation of the monitors, it will
	  really need cleaning later
	- rename files when monitor is done to: philo.c -> main.c and create new
	  file for all philo stuff (new philo.c), also rename state.c (bad name)
	- monitors also need to exit when ret is 1, meaning there's a need for a
	  monitor_join loop function ==> DID A join_n_threads function instead

WON'T DO:
	- optimization in monitor routine where usleep for time left until death
	  minus 10 ms
	- monitor_terminate

CHANGE:
	- get_time in microseconds instead of milli and do divisions / 1000 for print

